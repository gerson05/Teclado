pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Obteniendo c√≥digo fuente del repositorio...'
                // En un escenario real, aqu√≠ har√≠as:
                // git checkout: scm
                sh 'echo "C√≥digo fuente obtenido"'
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                echo 'Ejecutando an√°lisis de calidad con SonarQube...'
                script {
                    // Configuraci√≥n de SonarQube
                    def scannerHome = tool 'SonarQubeScanner'
                    withSonarQubeEnv('SonarQube') {
                        sh "${scannerHome}/bin/sonar-scanner " +
                           "-Dsonar.projectKey=teclado-app " +
                           "-Dsonar.sources=. " +
                           "-Dsonar.host.url=http://172.171.112.29:9000 " +
                           "-Dsonar.login=admin " +
                           "-Dsonar.password=admin"
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Construyendo aplicaci√≥n...'
                sh 'echo "Aplicaci√≥n construida exitosamente"'
                // Aqu√≠ podr√≠as agregar pasos de build si fuera necesario
            }
        }
        
        stage('Deploy to Nginx') {
            steps {
                echo 'Desplegando aplicaci√≥n a Nginx...'
                script {
                    // Copiar archivos a la VM de Nginx
                    sh 'echo "Copiando archivos a Nginx..."'
                    sh 'echo "Reiniciando contenedor Nginx..."'
                    sh 'echo "Verificando despliegue..."'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completado'
            // Limpiar archivos temporales si es necesario
        }
        success {
            echo '‚úÖ Pipeline ejecutado exitosamente'
            echo 'üéâ Aplicaci√≥n Teclado desplegada correctamente'
        }
        failure {
            echo '‚ùå Pipeline fall√≥'
            // Aqu√≠ podr√≠as enviar notificaciones de error
        }
    }
}
